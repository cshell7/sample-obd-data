{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","error","setError","handleSetError","errorText","console","files","setFiles","numberOfFiles","Object","keys","length","sampleRate","setSampleRate","numberOfColumns","setNewNumberOfColumns","header","setHeader","rows","setRows","currentFileIndex","setCurrentFileIndex","isReading","setIsReading","useEffect","reader","FileReader","readAsText","onload","result","split","newHeader","newRows","newNumberOfColumns","haveFilesBeenSampled","setHaveFilesBeenSampled","filter","word","i","setNewFile","join","hasProcessedData","setHasProcessedData","map","row","columns","setColumns","reduce","newObject","headerValue","index","values","valuesThatAreInts","value","Number","isInteger","parseInt","name","max","Math","min","avg","p","c","selectedField","setSelectedField","cachedValuesString","localStorage","getItem","cachedValues","JSON","parse","useExample","setUseExample","numberOfDataPoints","example","there","mainValue","secondaryValue","back","log","className","type","onChange","target","every","size","ONE_MEGABYTE","multiple","accept","href","encodeURIComponent","style","color","marginTop","download","onClick","setItem","stringify","removeItem","margin","display","entries","some","key","viewBox","width","height","class","border","marginBottom","fill","stroke","stroke-width","points","floor","graphHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d71ec6bb.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport example from \"./example.json\";\n\nconst ONE_MEGABYTE = 1000000; // Bytes\n\nfunction App() {\n  const [error, setError] = useState();\n  const handleSetError = (errorText) => {\n    setError(errorText);\n    console.error(errorText);\n  };\n\n  // Save submitted file to state\n  const [files, setFiles] = useState(\"\");\n  const numberOfFiles = Object.keys(files || {}).length;\n  const handleFileUpload = ({ target }) => {\n    if (\n      // Check file type\n      !Object.values(target.files).every((value) => value.type === \"text/csv\")\n    ) {\n      handleSetError(\"File type is incorrect. Make sure it is a .csv file\");\n      setFiles(\"\");\n    } else if (\n      // Check file size\n      !Object.values(target.files).every(\n        (value) => value.size < ONE_MEGABYTE * 10\n      )\n    ) {\n      handleSetError(\"File is too large. 10MB max.\");\n      setFiles(\"\");\n    } else setFiles(target.files);\n  };\n\n  // Read and consolidate files\n  const [sampleRate, setSampleRate] = useState(60);\n  const [numberOfColumns, setNewNumberOfColumns] = useState();\n  const [header, setHeader] = useState();\n  const [rows, setRows] = useState([]);\n  const [currentFileIndex, setCurrentFileIndex] = useState(0);\n  const [isReading, setIsReading] = useState(false);\n  useEffect(() => {\n    if (!isReading && currentFileIndex < numberOfFiles) {\n      setIsReading(true);\n      const reader = new FileReader();\n      reader.readAsText(files[currentFileIndex]);\n\n      reader.onload = function () {\n        const [newHeader, ...newRows] = reader.result.split(\"\\n\");\n        const newNumberOfColumns = newHeader.split(\",\").length;\n        if (!numberOfColumns || numberOfColumns === newNumberOfColumns) {\n          if (!header) {\n            setHeader(newHeader);\n            setNewNumberOfColumns(newNumberOfColumns);\n          }\n          setRows([...rows, ...newRows]);\n          setCurrentFileIndex(currentFileIndex + 1);\n        } else {\n          handleSetError(\n            \"Number of columns is not the same accross files. Please try again.\"\n          );\n        }\n        setIsReading(false);\n        setError(\"\");\n      };\n    }\n  }, [\n    currentFileIndex,\n    numberOfFiles,\n    files,\n    numberOfColumns,\n    header,\n    rows,\n    isReading,\n  ]);\n\n  // Sample data\n  const [haveFilesBeenSampled, setHaveFilesBeenSampled] = useState(false);\n  useEffect(() => {\n    if (\n      numberOfFiles > 0 &&\n      !haveFilesBeenSampled &&\n      currentFileIndex === numberOfFiles\n    ) {\n      setRows(rows.filter((word, i) => i % sampleRate === 0));\n      setHaveFilesBeenSampled(true);\n    }\n  }, [currentFileIndex, numberOfFiles, rows, sampleRate, haveFilesBeenSampled]);\n\n  const [newFile, setNewFile] = useState();\n  useEffect(() => {\n    if (haveFilesBeenSampled) {\n      setNewFile([header, ...rows].join(\"\\n\"));\n    }\n  }, [haveFilesBeenSampled, header, rows]);\n\n  const [hasProcessedData, setHasProcessedData] = useState(false);\n  useEffect(() => {\n    if (haveFilesBeenSampled && !hasProcessedData) {\n      setHeader(header.split(\",\"));\n      setRows(rows.map((row) => row.split(\",\")));\n      setHasProcessedData(true);\n    }\n  }, [haveFilesBeenSampled, hasProcessedData, header, rows]);\n\n  const [columns, setColumns] = useState();\n  useEffect(() => {\n    if (hasProcessedData && !columns) {\n      setColumns(\n        header.reduce((newObject, headerValue, index) => {\n          const values = rows.map((row) => row[index]);\n          const valuesThatAreInts = values.filter((value) =>\n            Number.isInteger(parseInt(value))\n          );\n          return {\n            ...newObject,\n            [index]: {\n              name: headerValue,\n              values,\n              max: Math.max(...valuesThatAreInts),\n              min: Math.min(...valuesThatAreInts),\n              avg:\n                valuesThatAreInts.reduce(\n                  (p, c) => parseInt(p) + parseInt(c),\n                  0\n                ) / valuesThatAreInts.length,\n            },\n          };\n        }, {})\n      );\n    }\n  }, [hasProcessedData, columns, header, rows]);\n\n  const graphWidth = 800;\n  const graphHeight = 400;\n\n  const [selectedField, setSelectedField] = useState();\n\n  const cachedValuesString = localStorage.getItem(\"savedOBDSample\");\n  const cachedValues = !!cachedValuesString && JSON.parse(cachedValuesString);\n\n  const [useExample, setUseExample] = useState(false);\n  const numberOfDataPoints = useExample\n    ? example.there[0].values.length\n    : rows?.length;\n\n  const mainValue = useExample ? example.there : columns;\n  const secondaryValue = useExample ? example.back : cachedValues;\n\n  console.log(mainValue?.[selectedField]);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>OBD2 data sampler</h1>\n        {!!error && <p>{error}</p>}\n        <p>\n          Sample rate: 1 out of every{\" \"}\n          <input\n            type=\"number\"\n            onChange={({ target }) => setSampleRate(target.value)}\n            value={sampleRate}\n          />\n        </p>\n\n        <input type=\"file\" onChange={handleFileUpload} multiple accept=\".csv\" />\n        {haveFilesBeenSampled && (\n          <>\n            <a\n              href={`data:text/plain;charset=utf-8,${encodeURIComponent(\n                columns\n              )}`}\n              style={{ color: \"white\", marginTop: \"16px\" }}\n              download=\"headers.csv\"\n            >\n              Download sampled data\n            </a>\n            <button\n              onClick={() => {\n                localStorage.setItem(\"savedOBDSample\", JSON.stringify(columns));\n              }}\n            >\n              Save\n            </button>\n            <button\n              onClick={() => {\n                localStorage.removeItem(\"savedOBDSample\");\n              }}\n            >\n              Clear Saved\n            </button>\n          </>\n        )}\n        <button\n          onClick={() => {\n            setUseExample(!useExample);\n          }}\n        >\n          {useExample ? \"use uploaded files\" : \"use example\"}\n        </button>\n      </header>\n      {mainValue && (\n        <select\n          onChange={({ target }) => setSelectedField(target.value)}\n          value={selectedField || \"\"}\n          style={{ margin: \"16px auto\", display: \"block\" }}\n        >\n          <option value=\"\"></option>\n          {Object.entries(mainValue)\n            .filter(([key, { values }]) =>\n              values.some((value) => Number.isInteger(parseInt(value)))\n            )\n            .map(([key, { name }]) => (\n              <option key={key} value={key}>\n                {name}\n              </option>\n            ))}\n        </select>\n      )}\n      {!!selectedField && (\n        <>\n          <p>max: {mainValue[selectedField].max}</p>\n          <p>avg: {mainValue[selectedField].avg}</p>\n          <p>min: {mainValue[selectedField].min}</p>\n        </>\n      )}\n      {!!selectedField && secondaryValue && (\n        <>\n          <p>cached max: {secondaryValue[selectedField].max}</p>\n          <p>cached avg: {secondaryValue[selectedField].avg}</p>\n          <p>cached min: {secondaryValue[selectedField].min}</p>\n        </>\n      )}\n      <svg\n        viewBox={`0 0 ${graphWidth} ${graphHeight}`}\n        width={graphWidth}\n        height={graphHeight}\n        class=\"chart\"\n        style={{\n          border: \"1px solid gray\",\n          marginTop: \"16px\",\n          marginBottom: \"32px\",\n        }}\n      >\n        {!!selectedField && (\n          <>\n            <polyline\n              fill=\"none\"\n              stroke=\"blue\"\n              stroke-width=\"2\"\n              points={mainValue[selectedField].values\n                .filter((value) => Number.isInteger(parseInt(value)))\n                .map((value, index) => {\n                  return `${Math.floor(\n                    (graphWidth / numberOfDataPoints) * index\n                  )},${\n                    Number.isInteger(parseInt(value))\n                      ? graphHeight -\n                        Math.floor(\n                          (graphHeight / 100) *\n                            ((value / mainValue[selectedField].max) * 100)\n                        )\n                      : 0\n                  }`;\n                })\n                .join(\" \")}\n            />\n            <polyline\n              fill=\"none\"\n              stroke=\"lightblue\"\n              stroke-width=\"2\"\n              points={`0,${\n                graphHeight -\n                Math.floor(\n                  (graphHeight / 100) *\n                    ((mainValue[selectedField].avg /\n                      mainValue[selectedField].max) *\n                      100)\n                )\n              } ${graphWidth},${\n                graphHeight -\n                Math.floor(\n                  (graphHeight / 100) *\n                    ((mainValue[selectedField].avg /\n                      mainValue[selectedField].max) *\n                      100)\n                )\n              }`}\n            />\n            {(!!cachedValues || useExample) && (\n              <>\n                <polyline\n                  fill=\"none\"\n                  stroke=\"red\"\n                  stroke-width=\"2\"\n                  points={secondaryValue[selectedField].values\n                    .filter((value) => Number.isInteger(parseInt(value)))\n                    .map((value, index) => {\n                      return `${Math.floor(\n                        (graphWidth / numberOfDataPoints) * index\n                      )},${\n                        Number.isInteger(parseInt(value))\n                          ? graphHeight -\n                            Math.floor(\n                              (graphHeight / 100) *\n                                ((value / secondaryValue[selectedField].max) *\n                                  100)\n                            )\n                          : 0\n                      }`;\n                    })\n                    .join(\" \")}\n                />\n                <polyline\n                  fill=\"none\"\n                  stroke=\"pink\"\n                  stroke-width=\"2\"\n                  points={`0,${\n                    graphHeight -\n                    Math.floor(\n                      (graphHeight / 100) *\n                        ((secondaryValue[selectedField].avg /\n                          secondaryValue[selectedField].max) *\n                          100)\n                    )\n                  } ${graphWidth},${\n                    graphHeight -\n                    Math.floor(\n                      (graphHeight / 100) *\n                        ((secondaryValue[selectedField].avg /\n                          secondaryValue[selectedField].max) *\n                          100)\n                    )\n                  }`}\n                />\n              </>\n            )}\n          </>\n        )}\n      </svg>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}